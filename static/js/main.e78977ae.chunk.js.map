{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useState","filterInput","setFilterInput","filterInputLast","setFilterInputLast","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","App","useMemo","Header","accessor","Cell","alt","src","setData","useEffect","a","axios","result","results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0RAGe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAETC,mBAAS,IAFA,mBAExCC,EAFwC,KAE3BC,EAF2B,OAYDF,mBAAS,IAZR,mBAYxCG,EAZwC,KAYvBC,EAZuB,OA6B3CC,mBAAS,CACXP,UACAC,QAEFO,aACAC,aAXEC,EAvB6C,EAuB7CA,cACAC,EAxB6C,EAwB7CA,kBACAC,EAzB6C,EAyB7CA,aACAC,EA1B6C,EA0B7CA,KACAC,EA3B6C,EA2B7CA,WACAC,EA5B6C,EA4B7CA,UAYF,OACE,gCACE,uBACEC,MAAOb,EACPc,SAvCqB,SAAAC,GACzB,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,aAAcC,GACxBZ,EAAeY,IAqCXK,YAAa,iBAEf,uBACEL,MAAOX,EACPY,SAlCyB,SAAAC,GAC7B,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,YAAaC,GACvBV,EAAmBU,IAgCfK,YAAa,gBAEf,kDAAWX,KAAX,cACA,gCACGE,EAAaU,KAAI,SAAAC,GAAW,OAC3B,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,8CACIA,EAAOC,eAAeD,EAAOE,yBADjC,IAEAC,UACEH,EAAOI,SACHJ,EAAOK,aACL,YACA,WACF,GAPN,SAUCL,EAAOM,OAAO,wBAMvB,iDAAWrB,KAAX,aACGE,EAAKS,KAAI,SAACW,EAAKC,GAEd,OADApB,EAAWmB,GAET,8CAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMd,KAAI,SAAAe,GACb,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,8B,MCflDO,MA9Df,WAEE,IAAMvC,EAAUwC,mBACd,iBAAM,CACJ,CAEEC,OAAQ,YAERzC,QAAS,CACP,CACEyC,OAAQ,QACRC,SAAU,oBACVC,KAAM,YAA0B,IAAf3B,EAAc,EAAtBqB,KAAQrB,MACf,OACE,qBAAK4B,IAAK5B,EAAO6B,IAAK7B,MAI5B,CACEyB,OAAQ,QACRC,SAAU,cAEZ,CACED,OAAQ,QACRC,SAAU,cAEZ,CACED,OAAQ,OACRC,SAAU,aAEZ,CACED,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,QACRC,SAAU,cAKlB,IAzCW,EA6CWxC,mBAAS,IA7CpB,mBA6CND,EA7CM,KA6CA6C,EA7CA,KAuDb,OAPAC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEACsBC,IAAM,gDAD5B,OACOC,EADP,OAECJ,EAAQI,EAAOjD,KAAKkD,SAFrB,0CAAD,KAIC,IAGD,qBAAKtB,UAAU,MAAf,SACE,cAAC9B,EAAD,CAAOC,QAASA,EAASC,KAAMA,OClDtBmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS7B,OACP,cAAC,IAAM8B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e78977ae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\nexport default function Table({ columns, data }) {\r\n  // Create a state for First Name\r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n\r\n  // Update the state when input changes\r\n  const handleFilterChange = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"name.first\", value); // Update the name.first filter. Now our table will filter and show only the rows which have a matching value\r\n    setFilterInput(value);\r\n  };\r\n\r\n  // Create a state for Last Name\r\n  const [filterInputLast, setFilterInputLast] = useState(\"\");\r\n\r\n  // Update the state when input changes\r\n  const handleFilterChangeLast = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"name.last\", value); // Update the name.last filter. Now our table will filter and show only the rows which have a matching value\r\n    setFilterInputLast(value);\r\n  };\r\n\r\n  // Use the useTable Hook to send the columns and data to build the table\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    rows, // rows for the table based on the data passed\r\n    prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    setFilter // The useFilter Hook provides a way to set the filter\r\n  } = useTable({\r\n    columns,\r\n    data\r\n  },\r\n  useFilters, // Adding the useFilters Hook to the table\r\n  useSortBy // This plugin Hook will help to sort our table columns\r\n  );\r\n\r\n  /* \r\n    Render the UI for the table\r\n  */\r\n  return (\r\n    <div>\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={\"Filter First\"}\r\n      />\r\n      <input\r\n        value={filterInputLast}\r\n        onChange={handleFilterChangeLast}\r\n        placeholder={\"Filter Last\"}\r\n      />\r\n      <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map(headerGroup => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <th\r\n              {...column.getHeaderProps(column.getSortByToggleProps())}\r\n              className={\r\n                column.isSorted\r\n                  ? column.isSortedDesc\r\n                    ? \"sort-desc\"\r\n                    : \"sort-asc\"\r\n                  : \"\"\r\n              }\r\n            >\r\n              {column.render(\"Header\")}\r\n            </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    </div>\r\n  );\r\n}","import React, { useMemo, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Table from \"./Table\";\nimport \"./App.css\";\n\nfunction App() {\n\n  const columns = useMemo (\n    () => [\n      {\n        // group - Employees\n        Header: \"Employees\",\n        // group columns\n        columns: [\n          {\n            Header: \"Photo\",\n            accessor: \"picture.thumbnail\",\n            Cell: ({ cell: { value } }) => {\n              return (\n                <img alt={value} src={value} />\n              );\n            }\n          },\n          {\n            Header: \"Title\",\n            accessor: \"name.title\",\n          },\n          {\n            Header: \"First\",\n            accessor: \"name.first\",\n          },\n          {\n            Header: \"Last\",\n            accessor: \"name.last\",\n          },\n          {\n            Header: \"Email\",\n            accessor: \"email\"\n          },\n          {\n            Header: \"Phone\",\n            accessor: \"phone\"\n          }\n        ]\n      },\n    ],\n    []\n  );\n\n  // data state to store the API data. Its initial value is an empty array\n  const [data, setData] = useState([]);\n\n  // Using useEffect to call the API once mounted and set the data\n  useEffect(() => {\n    (async () => {\n      const result = await axios(\"https://randomuser.me/api/?results=10&nat=us\");\n      setData(result.data.results);\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}